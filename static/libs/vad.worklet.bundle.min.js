(()=>{"use strict";var t,e;(e=t||(t={})).AudioFrame="AUDIO_FRAME",e.SpeechStart="SPEECH_START",e.VADMisfire="VAD_MISFIRE",e.SpeechEnd="SPEECH_END";const s=["error","debug","warn"].reduce(((t,e)=>(t[e]=function(t){return(...e)=>{console[t]("[VAD]",...e)}}(e),t)),{});class i{constructor(t,e){this.ort=t,this.modelFetcher=e,this.init=async()=>{s.debug("initializing vad");const t=await this.modelFetcher();this._session=await this.ort.InferenceSession.create(t),this._sr=new this.ort.Tensor("int64",[16000n]),this.reset_state(),s.debug("vad is initialized")},this.reset_state=()=>{const t=Array(128).fill(0);this._h=new this.ort.Tensor("float32",t,[2,1,64]),this._c=new this.ort.Tensor("float32",t,[2,1,64])},this.process=async t=>{const e={input:new this.ort.Tensor("float32",t,[1,t.length]),h:this._h,c:this._c,sr:this._sr},s=await this._session.run(e);this._h=s.hn,this._c=s.cn;const[i]=s.output.data;return{notSpeech:1-i,isSpeech:i}}}}i.new=async(t,e)=>{const s=new i(t,e);return await s.init(),s};class r{constructor(t){this.options=t,this.process=t=>{const e=[];for(const e of t)this.inputBuffer.push(e);for(;this.inputBuffer.length*this.options.targetSampleRate/this.options.nativeSampleRate>this.options.targetFrameSize;){const t=new Float32Array(this.options.targetFrameSize);let s=0,i=0;for(;s<this.options.targetFrameSize;){let e=0,r=0;for(;i<Math.min(this.inputBuffer.length,(s+1)*this.options.nativeSampleRate/this.options.targetSampleRate);)e+=this.inputBuffer[i],r++,i++;t[s]=e/r,s++}this.inputBuffer=this.inputBuffer.slice(i),e.push(t)}return e},t.nativeSampleRate<16e3&&s.error("nativeSampleRate is too low. Should have 16000 = targetSampleRate <= nativeSampleRate"),this.inputBuffer=[]}}class n extends AudioWorkletProcessor{constructor(t){super(),this._initialized=!1,this.init=async()=>{s.debug("initializing worklet"),this.resampler=new r({nativeSampleRate:sampleRate,targetSampleRate:16e3,targetFrameSize:this.options.frameSamples}),this._initialized=!0,s.debug("initialized worklet")},this.options=t.processorOptions,this.init()}process(e,s,i){const r=e[0][0];if(this._initialized&&r instanceof Float32Array){const e=this.resampler.process(r);for(const s of e)this.port.postMessage({message:t.AudioFrame,data:s.buffer},[s.buffer])}return!0}}registerProcessor("vad-helper-worklet",n)})();